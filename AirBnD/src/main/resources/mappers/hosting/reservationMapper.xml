<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.seven.jong.repository.hosting.IReservationMapper">

    <resultMap id="reservationMap" type="com.seven.jong.VO.hosting.ReservationVO" >
        <id property="reservationId" column="reservation_id"/>
        <result property="accommodationId" column="accommodation_id"/>
        <result property="userId" column="user_id"/>
        <result property="numberOfGuest" column="number_guest"/>
        <result property="checkIn" column="check_in"/>
        <result property="checkOut" column="check_out"/>
        <result property="regDate" column="reg_date"/>
    </resultMap>
    
    <resultMap id="reservationAdmin" type="com.seven.jong.DTO.hosting.ReservationAdminDTO" >
        <id property="reservationId" column="reservation_id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="numberOfGuest" column="number_guest"/>
        <result property="checkIn" column="check_in"/>
        <result property="checkOut" column="check_out"/>
        <result property="regDate" column="reg_date"/>
    </resultMap>

	<insert id="addReservation">
		INSERT INTO RESERVATION (RESERVATION_ID, ACCOMMODATION_ID, USER_ID, NUMBER_GUEST, CHECK_IN, CHECK_OUT)
		VALUES (RESERVATION_SEQ.nextval, #{accommodationId}, #{userId}, #{numberOfGuest}, #{checkIn}, #{checkOut})
	</insert>

	<update id="updateReservation">
		UPDATE RESERVATION SET NUMBER_GUEST=#{numberOfGuest}, CHECK_IN=#{checkIn}, CHECK_OUT=#{checkOut}
		WHERE RESERVATION_ID =#{reservationId}
	</update>

	<delete id="deleteReservation">
		DELETE RESERVATION
		WHERE RESERVATION_ID=#{reservationId}
	</delete>

	<select id="getOneById" resultMap="reservationMap">
		SELECT * FROM RESERVATION
		WHERE RESERVATION_ID=#{reservationId}
	</select>

	<select id="getAllByUser" resultMap="reservationMap">
		SELECT *
		FROM
		(SELECT ROW_NUMBER() OVER (ORDER BY RESERVATION_ID DESC) NUM, A.*
		FROM
		RESERVATION A)
		WHERE USER_ID=#{userId} AND NUM BETWEEN #{firstPage} AND #{lastPage}
	</select>

	<select id="getAllByAccommodation" resultMap="reservationMap">
		SELECT * FROM RESERVATION
		WHERE ACCOMMODATION_ID=#{accommodationId}
	</select>

	<select id="getNumberOfReservationByUserId" resultType="Integer">
		select count(*) from RESERVATION
		WHERE USER_ID=#{userId}
	</select>

	<!-- 총 예약 수 받아오기 -->
	<select id="reservationCount" resultType="Integer">
		select count(*) from RESERVATION
	</select>

	
	<!-- 예약 정보 가져오기 -->
	<select id="reservationList" resultMap="reservationAdmin">
		select B.* from(select rownum rn, A.* from
			(SELECT RES.reservation_id, AC.name,US.email, RES.number_guest, RES.check_in, RES.check_out, RES.REG_DATE
			FROM RESERVATION RES, ACCOMMODATION AC, AIR_USER US
			WHERE RES.ACCOMMODATION_ID = AC.ACCOMMODATION_ID AND RES.USER_ID = US.USER_ID order by RESERVATION_ID desc)A)B where rn between #{s} and #{e}
	</select>
	
	<!-- 검색 조건에 맞는 예약정보 수 -->
	<select id="SearchReservationCount" resultType="Integer">
		select count(*) from (SELECT RES.reservation_id, AC.name,US.email, RES.number_guest, RES.check_in, RES.check_out, RES.REG_DATE
			FROM RESERVATION RES, ACCOMMODATION AC, AIR_USER US
			WHERE RES.ACCOMMODATION_ID = AC.ACCOMMODATION_ID AND RES.USER_ID = US.USER_ID) where ${c} like '%'||#{search}||'%' order by reg_date desc
	</select>
	
	<!-- 검색 조건에 맞는 예약 정보 리스트 -->
	<select id="ReservationSearchList" resultMap="reservationAdmin">
		select B.* from(select rownum rn, A.* from
			(select * from (SELECT RES.reservation_id, AC.name,US.email, RES.number_guest, RES.check_in, RES.check_out, RES.REG_DATE
			FROM RESERVATION RES, ACCOMMODATION AC, AIR_USER US
			WHERE RES.ACCOMMODATION_ID = AC.ACCOMMODATION_ID AND RES.USER_ID = US.USER_ID) where ${c} like '%'||#{search}||'%' order by RESERVATION_ID desc)A)B where rn between #{s} and #{e}
	</select>



</mapper>