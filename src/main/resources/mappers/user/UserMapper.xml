<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.seven.jong.repository.IUserMapper">

    <resultMap id="UserMap" type="com.seven.jong.VO.UserVO" >
        <id property="userId" column="user_id"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="birth" column="birth"/>
        <result property="phone" column="phone"/>
        <result property="regDate" column="reg_date"/>
    </resultMap>
    

    

    <!-- 회원가입   false = 0 true = 1 -->
    <insert id="addUser">
        INSERT INTO AIR_USER (user_id, email, password, name, birth, phone, ISACCOUNTLOCKED)
        VALUES (AIR_USER_SEQ.nextval,#{email}, #{password}, #{name}, #{birth}, #{phone}, #{isAccountLocked})
    </insert>
    
    <!-- 총 유저 수 가져오기 -->
    <select id="selectUserCount" resultType="Integer">
		select count(*) from air_user
	</select>
    
    <!-- 모든 유저 가져오기 -->

    <select id="getUsers" resultMap="UserMap">
    	select * from AIR_USER
    </select>
    
    <!-- 하나의 유저 정보 가져오기 아이디로-->
    <select id="getUserById" resultMap="UserMap">
		select * from AIR_USER where user_id= #{user_id}
    </select>
	<!-- 하나의 유저 정보 가져오기 이메일로 -->
	<select id="getUserByEmail" resultMap="UserMap">
		select * from AIR_USER where EMAIL= #{email}
    </select>

    <select id="userInfo" resultMap="UserMap">
    	select * from air_user
    </select>
    
    
    <!-- 요청 페이지 유저 가져오기 -->
    <select id="pageUserInfo" resultMap="UserMap">
    	select B.* from(select rownum rn, A.* from
		(select * from air_user order by reg_date desc)A)B where rn between #{s} and #{e}
    </select>
    
    <!-- 하나의 유저 정보 가져오기 -->
    <select id="info" resultMap="UserMap">
		select * from air_user where user_id=#{userId}

	</select>
	
	<!-- 유저정보 수정 -->
	<update id="updateUserInfo">
		UPDATE air_user SET NAME = #{name}, BIRTH = #{birth}, PHONE=#{phone} where USER_ID = #{userId}
	</update>
	
	<!-- 유저 검색 -->
	<select id="userSearchList" resultMap="UserMap">
		<if test='c== "email"'>
			select B.* from(select rownum rn, A.* from
			(select * from AIR_USER where email like '%'||#{search}||'%' order by reg_date desc)A)B where rn between #{s} and #{e}
		</if>
		<if test='c== "name"'>
			select B.* from(select rownum rn, A.* from
			(select * from AIR_USER where name like '%'||#{search}||'%' order by reg_date desc)A)B where rn between #{s} and #{e}
		</if>
		
	</select>
	
	<!-- 검색 조건에 맞는 유저 수 --> 
	<select id="selectSearchUserCount" resultType="Integer">
		<if test='c== "email"'>
		select count(*) from air_user where email like '%'||#{search}||'%' order by reg_date desc
		</if>
		<if test='c == "name"'>
		select count(*) from air_user where name like '%'||#{search}||'%' order by reg_date desc
		</if>
	</select>

	
</mapper>

